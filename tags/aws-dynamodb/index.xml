<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws Dynamodb on madhead</title>
    <link>https://madhead.me/tags/aws-dynamodb/</link>
    <description>Recent content in Aws Dynamodb on madhead</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 23 Feb 2024 17:24:00 +0300</lastBuildDate>
    <atom:link href="https://madhead.me/tags/aws-dynamodb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On DynamoDB&#39;s Single Table Design</title>
      <link>https://madhead.me/posts/std/</link>
      <pubDate>Fri, 23 Feb 2024 17:24:00 +0300</pubDate>
      <guid>https://madhead.me/posts/std/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;figure class=&#34;align-center&#34;&gt;&lt;img src=&#34;//storage.googleapis.com/madheadme-static/posts/std/001.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_whats_a_single_table_design&#34;&gt;What’s a Single Table Design?&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The world learned about the idea of Single Table Design (STD) for DynamoDB somewhere in 2019, probably when &lt;a href=&#34;https://www.trek10.com/blog/dynamodb-single-table-relational-modeling&#34;&gt;this article&lt;/a&gt; came out.&#xA;STD wasn’t just a weird idea by some unknown blogger like me, or an AWS DevRel, or any other kind of Internet freak, but it actually has its roots in the official Amazon DynamoDB documentation.&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-general-nosql-design.html&#34;&gt;Here&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;quoteblock&#34;&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;You should maintain &lt;strong&gt;as few tables as possible&lt;/strong&gt; in a DynamoDB application. Having fewer tables keeps things more scalable, requires less permissions management, and reduces overhead for your DynamoDB application. It can also help keep backup costs lower overall.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
