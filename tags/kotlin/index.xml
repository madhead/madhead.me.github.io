<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on madhead</title>
    <link>https://madhead.me/tags/kotlin/</link>
    <description>Recent content in kotlin on madhead</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 Jun 2020 09:00:00 +0300</lastBuildDate><atom:link href="https://madhead.me/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Kafka: Kafka Connect &#43; Wikipedia</title>
      <link>https://madhead.me/posts/kafka-connect-wikipedia/</link>
      <pubDate>Thu, 18 Jun 2020 09:00:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/kafka-connect-wikipedia/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I’ve been developing backend software for almost 10 years already and never had a chance to work closely with &lt;a href=&#34;https://kafka.apache.org&#34;&gt;Apache Kafka&lt;/a&gt;.
After a couple of technical interviews recently I’ve realized that it’s a significant gap in my experience.
So, I’ve decided to learn it by playing with publicly available Wikipedia’s recent changes event stream.
Join me in this article, where I’ll be developing a &lt;a href=&#34;https://kafka.apache.org/documentation/#connect&#34;&gt;Kafka Connect&lt;/a&gt; application listening for the latest Wikipedia edits and storing them in a Kafka topic!
I’ll develop a &lt;a href=&#34;https://kafka.apache.org/documentation/streams&#34;&gt;Kafka Streams&lt;/a&gt; application processing this topic in one of the future articles, so stay tuned.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How I fucked up with enum&#39;s hashCode</title>
      <link>https://madhead.me/posts/enums-fuckup/</link>
      <pubDate>Wed, 27 May 2020 09:00:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/enums-fuckup/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A short story about a newbie’s mistake I’ve made recently.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Redis module in Kotlin/Native</title>
      <link>https://madhead.me/posts/kotlin-native-redis/</link>
      <pubDate>Wed, 11 Mar 2020 09:00:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/kotlin-native-redis/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Those of you who have some experience with Redis may know that it is not just a simple cache or a plain key-value store, but actually a data structures server, supporting different kinds of values.
Out of the box it supports binary-safe strings, sets, lists, hashes, bit arrays, streams and HyperLogLogs.
Redis also &lt;a href=&#34;https://redis.io/topics/modules-native-types&#34;&gt;provides&lt;/a&gt; a simple C API for custom data structures, called native types.
Some of the popular community-supported native types are &lt;a href=&#34;https://oss.redislabs.com/redisbloom&#34;&gt;Bloom filters&lt;/a&gt;, &lt;a href=&#34;https://oss.redislabs.com/redisgraph&#34;&gt;graphs&lt;/a&gt;, &lt;a href=&#34;https://oss.redislabs.com/redisjson&#34;&gt;JSON objects&lt;/a&gt;, and &lt;a href=&#34;https://oss.redislabs.com/redisai&#34;&gt;tensors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let’s use Kotlin/Native to implement a simple data structure for parentheses expression validation just because we can.
But first, I want to say thanks to &lt;a href=&#34;https://research.jetbrains.org/researchers/artdegt&#34;&gt;Artyom Degtyarev&lt;/a&gt; from JetBrains, who helped a lot with Kotlin/Native in &lt;a href=&#34;https://kotlinlang.slack.com&#34;&gt;Kotlin Slack&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Redis module in Kotlin/Native</title>
      <link>https://madhead.me/posts/kotlin-native-redis/</link>
      <pubDate>Wed, 11 Mar 2020 09:00:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/kotlin-native-redis/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Those of you who have some experience with Redis may know that it is not just a simple cache or a plain key-value store, but actually a data structures server, supporting different kinds of values.
Out of the box it supports binary-safe strings, sets, lists, hashes, bit arrays, streams and HyperLogLogs.
Redis also &lt;a href=&#34;https://redis.io/topics/modules-native-types&#34;&gt;provides&lt;/a&gt; a simple C API for custom data structures, called native types.
Some of the popular community-supported native types are &lt;a href=&#34;https://oss.redislabs.com/redisbloom&#34;&gt;Bloom filters&lt;/a&gt;, &lt;a href=&#34;https://oss.redislabs.com/redisgraph&#34;&gt;graphs&lt;/a&gt;, &lt;a href=&#34;https://oss.redislabs.com/redisjson&#34;&gt;JSON objects&lt;/a&gt;, and &lt;a href=&#34;https://oss.redislabs.com/redisai&#34;&gt;tensors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let’s use Kotlin/Native to implement a simple data structure for parentheses expression validation just because we can.
But first, I want to say thanks to &lt;a href=&#34;https://research.jetbrains.org/researchers/artdegt&#34;&gt;Artyom Degtyarev&lt;/a&gt; from JetBrains, who helped a lot with Kotlin/Native in &lt;a href=&#34;https://kotlinlang.slack.com&#34;&gt;Kotlin Slack&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Speeding up the detekt task in a multi-project Gradle build.</title>
      <link>https://madhead.me/posts/detekt-faster/</link>
      <pubDate>Wed, 12 Feb 2020 09:00:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/detekt-faster/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I’m going to tell you how to significantly speed up the &lt;code&gt;detekt&lt;/code&gt; task in a multi-project Gradle build.
Precise numbers vary depending on many factors, of course.
In my case, in a build with 56 subprojects and ~7000 lines of code, it was about &lt;strong&gt;10 times faster&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Kotlin/Native for AWS Lambda</title>
      <link>https://madhead.me/posts/kotlin-native-lambda/</link>
      <pubDate>Fri, 05 Apr 2019 22:02:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/kotlin-native-lambda/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Amazon &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2018/11/aws-lambda-now-supports-custom-runtimes-and-layers&#34;&gt;announced&lt;/a&gt; Lambda Runtime API on AWS &lt;a href=&#34;https://reinvent.awsevents.com&#34;&gt;re:Invent&lt;/a&gt; 2018.
It allows developers, among other things, to build Lambda functions using any technology they want via so-called &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html&#34;&gt;Custom Runtimes&lt;/a&gt;.
Yes, it’s now possible to author a function on PHP, Perl, Pascal (anybody?) or even Bash (they use it in the &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-walkthrough.html&#34;&gt;docs&lt;/a&gt;)!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nice, isn’t it?
Let’s build an AWS Lambda function with &lt;a href=&#34;https://kotlinlang.org/docs/reference/native-overview.html&#34;&gt;Kotlin/Native&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Kotlin/Native for AWS Lambda</title>
      <link>https://madhead.me/posts/kotlin-native-lambda/</link>
      <pubDate>Fri, 05 Apr 2019 22:02:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/kotlin-native-lambda/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Amazon &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2018/11/aws-lambda-now-supports-custom-runtimes-and-layers&#34;&gt;announced&lt;/a&gt; Lambda Runtime API on AWS &lt;a href=&#34;https://reinvent.awsevents.com&#34;&gt;re:Invent&lt;/a&gt; 2018.
It allows developers, among other things, to build Lambda functions using any technology they want via so-called &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html&#34;&gt;Custom Runtimes&lt;/a&gt;.
Yes, it’s now possible to author a function on PHP, Perl, Pascal (anybody?) or even Bash (they use it in the &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-walkthrough.html&#34;&gt;docs&lt;/a&gt;)!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Nice, isn’t it?
Let’s build an AWS Lambda function with &lt;a href=&#34;https://kotlinlang.org/docs/reference/native-overview.html&#34;&gt;Kotlin/Native&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Cleaning Git repos</title>
      <link>https://madhead.me/posts/gitclean/</link>
      <pubDate>Thu, 22 Mar 2018 20:19:00 +0300</pubDate>
      
      <guid>https://madhead.me/posts/gitclean/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I guess, all popular Git repositories allow you to delete source branch when the PR with this branch is accepted.
But sometimes you forget to use this option and end up with hundreds or thousands of stale branches across dozens of projects.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
